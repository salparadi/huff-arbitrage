// +-------------------------------------------+
// |                Interfaces                 |
// +-------------------------------------------+

// Withdraw WETH withdrawWETH52(uint256) -> 1983e529 2db651dcb7aff5fed69dc7e38c60ff43195dec7cb279d8ed1642b96d
#define function withdrawWETH52(uint256) nonpayable returns ()

// Withdraw ETH withdrawETH292() -> 1e07a35f 5ae74236c32a8f8db1952e358739be2bf3a1b6028a6707929632beaf
#define function withdrawETH292() nonpayable returns ()

// Deposit WETH depositWETH7() -> 236b43c4 8ecce45265fe9db2613d4f98e1bd98e831144c7235a9543af9b8e007
#define function depositWETH7() payable returns ()

// Deposit ETH depositETH206() -> 284cf349 384bb2de80290286a20287626b422aadb77ecadcd7323d861516224a
#define function depositETH206() payable returns ()

// Uniswap V3 Swap Callback
#define function uniswapV3SwapCallback(int256,int256,bytes) payable returns ()

// +-------------------------------------------+
// |                Constants                  |
// +-------------------------------------------+

#define constant MAX_SQRT_RATIO = 0xFFFD8963EFD1FC6A506488495D951D5263988D25

#define constant MIN_SQRT_RATIO = 0x1000276A4

#define constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

#define constant OWNER = // DEPLOYER/OWNER ADDRESS HERE

// +-------------------------------------------+
// |              Function Sigs                |
// +-------------------------------------------+

// transfer(address to, uint value)
#define constant TRANSFER_SIG = 0xa9059cbb00000000000000000000000000000000000000000000000000000000

// transferFrom(address from, address to, uint value)
#define constant TRANSFER_FROM_SIG = 0x23b872dd00000000000000000000000000000000000000000000000000000000

// swap(uint amount0Out, uint amount1Out, address to, bytes data)
#define constant V2_SWAP_SIG = 0x022c0d9f00000000000000000000000000000000000000000000000000000000

// swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data)
#define constant V3_SWAP_SIG = 0x128acb0800000000000000000000000000000000000000000000000000000000

// deposit()
#define constant WETH_DEPOSIT_SIG = 0xd0e30db000000000000000000000000000000000000000000000000000000000

// +-------------------------------------------+
// |    UNISWAP V3 CALLDATA ENCODING FORMAT    |
// +-------------------------------------------+

// *-----------*---------------------------*
// | Bytes     |  Value                    |
// *-----------+---------------------------*
// | 1         |  Pool Types and Out Pos   |
// | 3         |  Amount In                |
// | 3         |  Amount Out               |
// | 20        |  V2 Pool                  |
// | 20        |  V3 Pool                  |
// *-----------*---------------------------*


#define macro CONSTRUCTOR() = takes (0) returns (0) {
 
    push0
    callvalue
    gt

    deposit jumpi

    deposit:
        [WETH_DEPOSIT_SIG]                              // Stack = [WETH_DEPOSIT_SIG, ]
        push0 mstore                                    // Stack = []

        // Set up the CALL parameters
        push0                                           // Stack = [out_size]
        push0                                           // Stack = [out_offset, out_size]
        push0                                       	// Stack = [in_size, out_offset, out_size]
        push0                                           // Stack = [in_offset, in_size, out_offset, out_size]
        callvalue                                       // Stack = [value, in_offset, in_size, out_offset, out_size]
        
        [WETH]                                          // Stack = [WETH, value, in_offset, in_size, out_offset, out_size, calldata, v3_amount_out, v3_amount_in]
        gas
        call

}

#define macro MAIN() = takes (0) returns (0) {
	// evm.codes caller = be862ad9abfe6f22bcb087716c7d89a26051f74c
	// evm.codes address = 9bbfed6889322e016e0a02ee459d306fc19545d8

	push0										// [0x00]
	calldataload								// [calldata]
    push0										// [0x00, calldata]
    byte										// [jumplabel]
	jump

	// 1: V2 > V3 00 01 = 05 (5)
	v2_v3_00_01:
		v2_v3_00_01_jump jump

	// 2: V3 > V2 00 01 = 0a (10)
	v3_v2_00_01:
		v3_v2_00_01_jump jump
	
	// 3: V2 > V3 01 00 = 0f (15)
	v2_v3_01_00:
		v2_v3_01_00_jump jump
	
	// 4: V3 > V2 01 00 = 14 (20)
	v3_v2_01_00:
		v3_v2_01_00_jump jump

	// 19 : 0x1983e529
	withdraw_weth: // withdrawWETH52(uint256) -> 1983e529 2db651dcb7aff5fed69dc7e38c60ff43195dec7cb279d8ed1642b96d
		withdraw_weth_jump jump
	
	// 1e : 0x1e07a35f
	withdraw_eth: // withdrawETH292() -> 1e07a35f 5ae74236c32a8f8db1952e358739be2bf3a1b6028a6707929632beaf
		withdraw_eth_jump jump
	
	// 23 : 0x236b43c4
	deposit_weth: // depositWETH7() -> 236b43c4 8ecce45265fe9db2613d4f98e1bd98e831144c7235a9543af9b8e007
		deposit_weth_jump jump
	
	// 28 : 0x284cf349
	deposit_eth: // depositETH206() -> 284cf349 384bb2de80290286a20287626b422aadb77ecadcd7323d861516224a
		deposit_eth_jump jump
	
	// wall of stops used so that the jumpdest of callback JUMPDEST equals 0xfa
	// 0xfa = first byte of function sig 0xfa461e33
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop stop stop stop
	stop stop stop stop stop stop stop stop stop stop
    
	uniswap_v3_callback: // 0xfa461e33 FA
		uniswap_v3_callback_jump jump
	
    fallback jump
	
	v2_v3_00_01_jump:
		
		ONLY_OWNER()

		// EXTRACT calldata
		push0 calldataload								// Stack = [chunk_1]
		0x20 calldataload								// Stack = [chunk_2, chunk_1]

		// V3_POOL PART 2
		0x88 shr										// Stack = [v3_pool_part_2, chunk_1]
		
		// V3_POOL PART 1
		dup2											// Stack = [chunk_1_copy, v3_pool_part_2, chunk_1]
		0xffffffffff and								// Stack = [v3_pool_part_1, v3_pool_part_2, chunk_1]
		0x78 shl										// Stack = [v3_pool_part_1 << 128, v3_pool_part_2, chunk_1]

		// V3_POOL (TO)
		or												// Stack = [v3_pool, chunk_1]

		// CALLDATA
		dup2                               				// Stack = [chunk_1_copy, v3_pool, chunk_1]
		0x28 shr                           				// Stack = [callback_data, v3_pool, chunk_1]
		
		// SQRT
		[MIN_SQRT_RATIO]								// Stack = [sqrt, callback_data, v3_pool, chunk_1]

		// AMOUNT_OUT
		dup4											// Stack = [chunk_1_copy, sqrt, callback_data, v3_pool, chunk_1] 
		0xC8 shr										// Stack = [chunk_1_copy >> 200, sqrt, callback_data, v3_pool, chunk_1] 
		0xffffff and									// Stack = [amount_out_3_bytes, sqrt, callback_data, v3_pool, chunk_1] 
		0x28 shl										// Stack = [amount_out, sqrt, callback_data, v3_pool, chunk_1]
		not												// Stack = [amount_out_twoscomp, sqrt, callback_data, v3_pool, chunk_1]
		0x01											// Stack = [1, amount_out_twoscomp, sqrt, callback_data, v3_pool, chunk_1]
		add												// Stack = [amount_out, sqrt, callback_data, v3_pool, chunk_1]

		// OUT_POS
		0x01											// Stack = [out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]

		// RECIPIENT
		address											// Stack = [address(this), out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]

		V3_SWAP()										// Stack = [v3_pool, chunk_1]
		stop
	
	v3_v2_00_01_jump:
		
		ONLY_OWNER()

		// EXTRACT calldata
		push0 calldataload								// Stack = [chunk_1]
		0x20 calldataload								// Stack = [chunk_2, chunk_1]

		// V3_POOL PART 2
		0x88 shr										// Stack = [v3_pool_part_2, chunk_1]
		
		// V3_POOL PART 1
		dup2											// Stack = [chunk_1_copy, v3_pool_part_2, chunk_1]
		0xffffffffff and								// Stack = [v3_pool_part_1, v3_pool_part_2, chunk_1]
		0x78 shl										// Stack = [v3_pool_part_1 << 128, v3_pool_part_2, chunk_1]

		// V3_POOL (TO)
		or												// Stack = [v3_pool, chunk_1]

		// CALLDATA
		dup2                               				// Stack = [chunk_1_copy, v3_pool, chunk_1]
		0x28 shr                           				// Stack = [callback_data, v3_pool, chunk_1]
		
		// SQRT
		[MAX_SQRT_RATIO]								// Stack = [sqrt, callback_data, v3_pool, chunk_1]

		// AMOUNT_IN
		dup4											// Stack = [chunk_1_copy, sqrt, callback_data, v3_pool, chunk_1] 
		0xE0 shr										// Stack = [calldata_copy >> 224, 0, flag, calldata]
		0xffffff and									// Stack = [amount_in_3bytes, 0, flag, calldata]
		0x28 shl										// Stack = [amount_in, flag, calldata]

		// OUT_POS
		push0											// Stack = [out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]

		// V2_POOL (RECIPIENT)
		dup6											// Stack = [chunk_1_copy, out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]
		0x28 shr										// Stack = [chunk_1_copy >> 40, , out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]
		0xffffffffffffffffffffffffffffffffffffffff and 	// Stack = [v2_pool, out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]

		V3_SWAP()										// Stack = [v3_pool, chunk_1]
		stop
	
	v2_v3_01_00_jump:
		
		ONLY_OWNER()

		// EXTRACT calldata
		push0 calldataload								// Stack = [chunk_1]
		0x20 calldataload								// Stack = [chunk_2, chunk_1]

		// V3_POOL PART 2
		0x88 shr										// Stack = [v3_pool_part_2, chunk_1]
		
		// V3_POOL PART 1
		dup2											// Stack = [chunk_1_copy, v3_pool_part_2, chunk_1]
		0xffffffffff and								// Stack = [v3_pool_part_1, v3_pool_part_2, chunk_1]
		0x78 shl										// Stack = [v3_pool_part_1 << 128, v3_pool_part_2, chunk_1]

		// V3_POOL (TO)
		or												// Stack = [v3_pool, chunk_1]

		// CALLDATA
		dup2                               				// Stack = [chunk_1_copy, v3_pool, chunk_1]
		0x28 shr                           				// Stack = [callback_data, v3_pool, chunk_1]
		
		// SQRT
		[MAX_SQRT_RATIO]								// Stack = [sqrt, callback_data, v3_pool, chunk_1]

		// AMOUNT_OUT
		dup4											// Stack = [chunk_1_copy, sqrt, callback_data, v3_pool, chunk_1] 
		0xC8 shr										// Stack = [chunk_1_copy >> 200, sqrt, callback_data, v3_pool, chunk_1] 
		0xffffff and									// Stack = [amount_out_3_bytes, sqrt, callback_data, v3_pool, chunk_1] 
		0x28 shl										// Stack = [amount_out, sqrt, callback_data, v3_pool, chunk_1]
		not												// Stack = [amount_out_twoscomp, sqrt, callback_data, v3_pool, chunk_1]
		0x01											// Stack = [1, amount_out_twoscomp, sqrt, callback_data, v3_pool, chunk_1]
		add												// Stack = [amount_out, sqrt, callback_data, v3_pool, chunk_1]

		// OUT_POS
		push0											// Stack = [out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]

		// RECIPIENT
		address											// Stack = [address(this), out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]

		V3_SWAP()										// Stack = [v3_pool, chunk_1]
		stop

	v3_v2_01_00_jump:

		ONLY_OWNER()

		// EXTRACT calldata
		push0 calldataload								// Stack = [chunk_1]
		0x20 calldataload								// Stack = [chunk_2, chunk_1]

		// V3_POOL PART 2
		0x88 shr										// Stack = [v3_pool_part_2, chunk_1]
		
		// V3_POOL PART 1
		dup2											// Stack = [chunk_1_copy, v3_pool_part_2, chunk_1]
		0xffffffffff and								// Stack = [v3_pool_part_1, v3_pool_part_2, chunk_1]
		0x78 shl										// Stack = [v3_pool_part_1 << 128, v3_pool_part_2, chunk_1]

		// V3_POOL (TO)
		or												// Stack = [v3_pool, chunk_1]

		// CALLDATA
		dup2                               				// Stack = [chunk_1_copy, v3_pool, chunk_1]
		0x28 shr                           				// Stack = [callback_data, v3_pool, chunk_1]
		
		// SQRT
		[MIN_SQRT_RATIO]								// Stack = [sqrt, callback_data, v3_pool, chunk_1]

		// AMOUNT_IN
		dup4											// Stack = [chunk_1_copy, sqrt, callback_data, v3_pool, chunk_1] 
		0xE0 shr										// Stack = [calldata_copy >> 224, 0, flag, calldata]
		0xffffff and									// Stack = [amount_in_3bytes, 0, flag, calldata]
		0x28 shl										// Stack = [amount_in, flag, calldata]

		// OUT_POS
		0x01											// Stack = [out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]

		// V2_POOL (RECIPIENT)
		dup6											// Stack = [chunk_1_copy, out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]
		0x28 shr										// Stack = [chunk_1_copy >> 40, , out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]
		0xffffffffffffffffffffffffffffffffffffffff and 	// Stack = [v2_pool, , out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]

		V3_SWAP()										// Stack = [v3_pool, chunk_1]
		stop
	
	uniswap_v3_callback_jump:
		UNISWAP_V3_CALLBACK()
	
	withdraw_weth_jump:
		ONLY_OWNER()
		WITHDRAW_WETH()
	
	withdraw_eth_jump:
		ONLY_OWNER()
		WITHDRAW_ETH()
	
	deposit_weth_jump:
		DEPOSIT_WETH()
	
	deposit_eth_jump:
		DEPOSIT_ETH()

	
	
	fallback:
		push0 push0 revert
	
}

#define macro UNISWAP_V3_CALLBACK() = takes (0) returns (0) {

	CHECK_ORIGIN()									// Check tx.origin to ensure it was this contract

    0x84 calldataload								// Stack = [calldata]
	dup1											// Stack = [calldata_copy, calldata]
    push0                                        	// [0x00, calldata_copy, calldata]
    byte                                        	// [flag, calldata]

    // 1: Check for 0x01. V2 > V3 00 01 / 05
    dup1											// [flag_copy, flag, calldata]
	0x05											// [05, flag_copy, flag, calldata]
	eq												// [flags_match, flag, calldata]
    v2_v3_00_01_callback_jump jumpi					// [flag, calldata]

	// 2: Check for 0x05. V3 > V2 00 01 / 0f
    dup1											// [flag_copy, flag, calldata]
	0x0a											// [0A, flag_copy, flag, calldata]
	eq												// [flags_match, flag, calldata]
    v3_v2_00_01_callback_jump jumpi					// [flag, calldata]

    // 3: Check for 0x02. V2 > V3 01 00 / 0a
    dup1											// [flag_copy, flag, calldata]
	0x0f											// [0f, flag_copy, flag, calldata]
	eq												// [flags_match, flag, calldata]
    v2_v3_01_00_callback_jump jumpi					// [flag, calldata]

    // 4: Check for 0x06. V3 > V2 01 00 / 14
    dup1											// [flag_copy, flag, calldata]
	0x14											// [14, flag_copy, flag, calldata]
	eq												// [flags_match, flag, calldata]
    v3_v2_01_00_callback_jump jumpi					// [flag, calldata]


	// Bot transfer amount_in to V2, call swap on V2 v3_amount_in from 0 > V3 (caller)
	v2_v3_00_01_callback_jump: // 05, 41f (1055)

		// Stack = [flag, calldata]

		0x04 calldataload							// Stack = [amount0Delta (v3_amount_in), flag, calldata]
		
		dup3										// Stack = [calldata_copy, amount0Delta (v3_amount_in), flag, calldata]
		0xC8 shr									// Stack = [calldata_copy >> 200, amount0Delta (v3_amount_in), flag, calldata]
		0xffffff and								// Stack = [amount_out_3bytes, amount0Delta (v3_amount_in), flag, calldata]
		0x28 shl									// Stack = [amount_out, amount0Delta (v3_amount_in), flag, calldata]

		0x24 calldataload							// Stack = [amount1Delta, amount_out, amount0Delta (v3_amount_in), flag, calldata]
		not											// Stack = [amount1Delta_twoscomp, amount_out, amount0Delta (v3_amount_in), flag, calldata]
		0x02										// Stack = [2, amount1Delta_twoscomp, amount_out, amount0Delta (v3_amount_in), flag, calldata]
		add											// Stack = [amount1Delta + 1, amount_out, amount0Delta (v3_amount_in), flag, calldata]
		gt											// Stack = [gte?, amount0Delta (v3_amount_in), flag, calldata]
		
		v2_v3_00_01_callback_continue jumpi			// Stack = [jump, gte?, amount0Delta (v3_amount_in), flag, calldata]

		push0 push0 revert

		v2_v3_00_01_callback_continue:				// Stack = [amount0Delta (v3_amount_in), flag, calldata]

			dup3											// Stack = [calldata_copy, amount0Delta (v3_amount_in), flag, calldata]
			0xE0 shr										// Stack = [calldata_copy >> 224, amount0Delta (v3_amount_in), flag, calldata]
			0xffffff and									// Stack = [amount_in_3bytes, amount0Delta (v3_amount_in), flag, calldata]
			0x28 shl										// Stack = [amount_in, amount0Delta (v3_amount_in), flag, calldata]

			dup4											// Stack = [calldata_copy, amount_in, amount0Delta (v3_amount_in), flag, calldata]
			0x28 shr										// Stack = [calldata_copy >> 40 (5 bytes), amount_in, amount0Delta (v3_amount_in), flag, calldata]
			0xffffffffffffffffffffffffffffffffffffffff and 	// Stack = [v2_pool, amount_in, amount0Delta (v3_amount_in), flag, calldata]
			address											// Stack = [self, v2_pool, amount_in, amount0Delta (v3_amount_in), flag, calldata]

			TRANSFER_FROM()									// Stack = [result, amount0Delta (v3_amount_in), flag, calldata]

			caller											// Stack = [v3_pool, amount0Delta (v3_amount_in), flag, calldata]
			push0											// Stack = [0, v3_pool, amount0Delta (v3_amount_in), flag, calldata]
			dup3											// Stack = [amount0Delta_copy (v3_amount_in), 0, v3_pool, amount0Delta (v3_amount_in), flag, calldata]

			V2_SWAP()										// Stack = [result, flag, calldata]
			stop

	// Call swap on V2 amount_out from 1 > bot. Transfer amount_in to V3 (caller)
	v3_v2_00_01_callback_jump: // 0a, 4f0 (1264)

		// Stack = [flag, calldata]

		push0										// Stack = [0, flag, calldata]

		address										// Stack = [self, 0, flag, calldata]
		dup4										// Stack = [calldata_copy, self, 0, flag, calldata]
		0xC8 shr									// Stack = [calldata_copy >> 200, self, 0, flag, calldata]
		0xffffff and								// Stack = [amount_out_3bytes, self, 0, flag, calldata]
		0x28 shl									// Stack = [amount_out, self, 0, flag, calldata]
		0x24 calldataload							// Stack = [amount1Delta (v3_amount_in), amount_out, self, 0, flag, calldata]
		dup2										// Stack = [amount_out_copy, amount1Delta (v3_amount_in), amount_out, self, 0, flag, calldata]
		gt											// Stack = [gte?, amount_out, self, 0, flag, calldata]

		v3_v2_00_01_callback_continue jumpi			// Stack = [jump, gte?, amount_out, self, 0, flag, calldata]

		push0 push0 revert

		v3_v2_00_01_callback_continue:				// Stack = [amount_out, self, 0, flag, calldata]

			push0										// Stack = [0, amount_out, self, 0, flag, calldata]

			V2_SWAP()									// Stack = [result, 0, flag, calldata]

			dup3										// Stack = [calldata_copy, 0, flag, calldata]
			0xE0 shr									// Stack = [calldata_copy >> 224, 0, flag, calldata]
			0xffffff and								// Stack = [amount_in_3bytes, 0, flag, calldata]
			0x28 shl									// Stack = [amount_in, 0, flag, calldata]
			caller										// Stack = [caller, amount_in, 0, flag, calldata]
			address										// Stack = [self, caller, amount_in, 0, flag, calldata]

			TRANSFER_FROM()								// Stack = [1, 0, flag, calldata]
			stop

	// Bot transfer amount_in to V2, call swap on V2 v3_amount_in from 1 > V3 (caller)
	v2_v3_01_00_callback_jump: // 0f, 5b1 (1457)

		// Stack = [flag, calldata]

		0x24 calldataload								// Stack = [amount1Delta (v3_amount_in), flag, calldata]

		dup3											// Stack = [calldata_copy, amount1Delta (v3_amount_in), flag, calldata]
		0xC8 shr										// Stack = [calldata_copy >> 200, amount1Delta (v3_amount_in), flag, calldata]
		0xffffff and									// Stack = [amount_out_3bytes, amount1Delta (v3_amount_in), flag, calldata]
		0x28 shl										// Stack = [amount_out, amount1Delta (v3_amount_in), flag, calldata]

		0x04 calldataload								// [amount0Delta, amount_out, amount1Delta (v3_amount_in), flag, calldata]
		not												// [amount0Delta_twoscomp, amount_out, amount1Delta (v3_amount_in), flag, calldata]
		0x02											// [2, amount0Delta_twoscomp, amount_out, amount1Delta (v3_amount_in), flag, calldata]
		add												// [amount0Delta + 1, amount_out, amount1Delta (v3_amount_in), flag, calldata]
		gt												// [gte?, amount1Delta (v3_amount_in), flag, calldata]

		v2_v3_01_00_callback_continue jumpi				// Stack = [jump, gte?, amount0Delta (v3_amount_in), flag, calldata]

		push0 push0 revert

		v2_v3_01_00_callback_continue:					// Stack = [amount1Delta (v3_amount_in), flag, calldata]

			dup3											// Stack = [calldata_copy, amount1Delta (v3_amount_in), flag, calldata]
			0xE0 shr										// Stack = [calldata_copy >> 224, amount1Delta (v3_amount_in), flag, calldata]
			0xffffff and									// Stack = [amount_in_3bytes, amount1Delta (v3_amount_in), flag, calldata]
			0x28 shl										// Stack = [amount_in, amount1Delta (v3_amount_in), flag, calldata]
			
			dup4											// Stack = [calldata_copy, amount_in, amount1Delta (v3_amount_in), flag, calldata]
			0x28 shr										// Stack = [calldata_copy >> 40 (5 bytes), amount_in, amount01Delta (v3_amount_in), flag, calldata]
			0xffffffffffffffffffffffffffffffffffffffff and 	// Stack = [v2_pool, amount_in, amount1Delta (v3_amount_in), flag, calldata]
			address											// Stack = [self, v2_pool, amount_in, amount1Delta (v3_amount_in), flag, calldata]

			TRANSFER_FROM()									// Stack = [result, amount1Delta (v3_amount_in), flag, calldata]

			caller											// Stack = [v3_pool, amount1Delta (v3_amount_in), flag, calldata]
			dup2											// Stack = [v3_amount_in_copy, v3_pool, amount1Delta (v3_amount_in), flag, calldata]
			push0											// Stack = [0, v3_amount_in_copy, v3_pool, amount1Delta (v3_amount_in), flag, calldata]

			V2_SWAP()									
			stop
	
	// Call swap on V2 amount_out from 0 > bot. Transfer amount_in to V3 (caller)
	v3_v2_01_00_callback_jump: // 14, 682 (1666)

		// Stack = [flag, calldata]

		push0										// Stack = [0, flag, calldata]

		address										// Stack = [self, 0, flag, calldata]
		push0										// Stack = [0, self, 0, flag, calldata]
		dup5										// Stack = [calldata_copy, 0, self, 0, flag, calldata]
		0xC8 shr									// Stack = [calldata_copy >> 200, 0, self, 0, flag, calldata]
		0xffffff and								// Stack = [amount_out_3bytes, 0, self, 0, flag, calldata]
		0x28 shl									// Stack = [amount_out, 0, self, 0, flag, calldata]
		0x04 calldataload							// Stack = [amount0Delta (v3_amount_in), amount_out, 0, self, 0, flag, calldata]
		dup2										// Stack = [amount_out_copy, amount0Delta (v3_amount_in), amount_out, 0, self, 0, flag, calldata]
		gt											// Stack = [gte?, amount_out, 0, self, 0, flag, calldata]

		v3_v2_01_00_callback_continue jumpi			// Stack = [jump, gte?, amount_out, self, 0, flag, calldata]

		push0 push0 revert

		v3_v2_01_00_callback_continue:				// Stack = [amount_out, 0, self, 0, flag, calldata]

			V2_SWAP()									// Stack = [result, 0, flag, calldata]

			dup3										// Stack = [calldata_copy, 0, flag, calldata]
			0xE0 shr									// Stack = [calldata_copy >> 224, 0, flag, calldata]
			0xffffff and								// Stack = [amount_in_3bytes, 0, flag, calldata]
			0x28 shl									// Stack = [amount_in, flag, calldata]
			caller										// Stack = [caller, amount_in, 0, flag, calldata]
			address										// Stack = [self, caller, amount_in, 1, 0, flag, calldata]

			TRANSFER_FROM()								// Stack = [1, 0, flag, calldata]
			stop
}


#define macro TRANSFER_FROM() = takes(0) returns (0) {
	
	// 23b872dd
	[TRANSFER_FROM_SIG] 							// Stack = [TRANSFER_FROM_SIG, self, to_address, amount_in, amount0Delta (v3_amount_in), flag, calldata]
	push0 mstore									// Stack = [self, to_address, amount_in, amount0Delta (v3_amount_in), flag, calldata]
	0x04 mstore 									// Stack = [to_address, amount_in, amount0Delta (v3_amount_in), flag, calldata]
	0x24 mstore 									// Stack = [amount_in, amount0Delta (v3_amount_in), flag, calldata]
	0x44 mstore 									// Stack = [amount0Delta (v3_amount_in), flag, calldata]

	// Set up the CALL parameters
	0x20											// Stack = [out_size, amount0Delta (v3_amount_in), flag, calldata]
	push0											// Stack = [out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	0x64 // 100										// Stack = [in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	push0											// Stack = [in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	push0											// Stack = [value, in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	
	[WETH]											// Stack = [WETH, value, in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]

	gas												// Stack = [gas, WETH, value, in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	call
	CHECK_CALL_STATUS()

}


#define macro V2_SWAP() = takes(0) returns (0) {
	
	// 022c0d9f
	[V2_SWAP_SIG]  									// Stack = [V2_SWAP_SIG, amount0Out, amount1Out, recipient, amount0Delta (v3_amount_in), flag, calldata]
	push0 mstore	// V2_SWAP_SIG					// Stack = [amount0Out, amount1Out, recipient, amount0Delta (v3_amount_in), flag, calldata]
	0x04 mstore		// amount0Out 					// Stack = [amount1Out, recipient, amount0Delta (v3_amount_in), flag, calldata]
	0x24 mstore		// amount1Out					// Stack = [recipient, amount0Delta (v3_amount_in), flag, calldata]
	0x44 mstore		// recipient					// Stack = [amount0Delta (v3_amount_in), flag, calldata]
	0x80											// Stack = [80, amount0Delta (v3_amount_in), flag, calldata]
	0x64 mstore		// offset						// Stack = [amount0Delta (v3_amount_in), flag, calldata]
	push0											// Stack = [00, amount0Delta (v3_amount_in), flag, calldata]
	0x84 mstore		// data							// Stack = [amount0Delta (v3_amount_in), flag, calldata]

	// Set up the CALL parameters
	push0											// Stack = [out_size, amount0Delta (v3_amount_in), flag, calldata]
	push0											// Stack = [out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	0xa4 // 164										// Stack = [in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	push0											// Stack = [in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	push0											// Stack = [value, in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]

	// Get v2_pool
	dup8											// Stack = [calldata_copy, value, in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	0x28 shr										// Stack = [calldata_copy >> 40 (5 bytes), value, in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	0xffffffffffffffffffffffffffffffffffffffff and	// Stack = [v2_pool, value, in_offset, in_size, out_offset, out_size, amount0Delta (v3_amount_in), flag, calldata]
	
	gas 											// Stack = [gas, v2_pool, value, in_offset, in_size, out_offset, out_size, flag, calldata]
	call
	CHECK_CALL_STATUS()

}


#define macro V3_SWAP() = takes(0) returns (0) {
	
	// 128acb08
	[V3_SWAP_SIG]									// Stack = [V3_SWAP_SIG, recipient, out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]
	push0 mstore	// 0 V3_SWAP_SIG				// Stack = [recipient, out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]
	0x04 mstore // 4 recipient 						// Stack = [out_pos, amount_out, sqrt, callback_data, v3_pool, chunk_1]
	0x24 mstore // 36 v3_outout_pos 				// Stack = [amount_out, sqrt, callback_data, v3_pool, chunk_1]
	0x44 mstore // 68 amount_out					// Stack = [sqrt, callback_data, v3_pool, chunk_1]
	0x64 mstore // 100 sqrt							// Stack = [callback_data, v3_pool, chunk_1]
	0xa0
	0x84 mstore // 132 offset
	0x1B
	0xA4 mstore // 164 length
	0x28 shl
	0xC4 mstore // 196 callback_data				// Stack = [v3_pool, chunk_1]

	// Set up the CALL parameters
	0x40											// Stack = [out_size, v3_pool, chunk_1]
	push0											// Stack = [out_offset, out_size, v3_pool, chunk_1]
	0xE4											// Stack = [in_size, out_offset, out_size, v3_pool, chunk_1]
	push0											// Stack = [in_offset, in_size, out_offset, out_size, v3_pool, chunk_1]
	push0											// Stack = [value, in_offset, in_size, out_offset, out_size, v3_pool, chunk_1]
	dup6											// Stack = [v3_pool_copy, value, in_offset, in_size, out_offset, out_size, v3_pool, chunk_1]

	gas 											// Stack = [gas, v3_pool_copy, value, in_offset, in_size, out_offset, out_size, v3_pool, chunk_1]
	call
	CHECK_CALL_STATUS()

}


#define macro WITHDRAW_WETH() = takes(0) returns (0) {
	// withdrawWETH52() 0x1983e529
	
	0x04
	calldataload
	address

    [TRANSFER_FROM_SIG] push0 mstore				// store 0xa9059cbb as mem(0x00)
	0x04 mstore
    [OWNER] 0x24 mstore								// store OWNER at mem(0x04)
    0x44 mstore										// store amountOut at mem(0x24)

    // make transfer call
    push0											// Stack = [retsize]
    push0											// Stack = [retoffset, retsize]
    0x64  // 68 (4 + 32 + 32 + 32)						// Stack = [argsize, retoffset, retsize]
    push0											// Stack = [argoffset, argsize, retoffset, retsize]
    push0											// Stack = [value, argoffset, argsize, retoffset, retsize]
    [WETH]											// Stack = [weth_addr, value, argoffset, argsize, retoffset, retsize]
    gas												// Stack = [gas, weth_addr, value, argoffset, argsize, retoffset, retsize]
    call

	stop

}


#define macro WITHDRAW_ETH() = takes(0) returns (0) {
	// withdrawETH292() 0x1e07a35f

	push0											// Stack = [retsize]
    push0											// Stack = [retoffset, retsize]
    push0											// Stack = [argsize, retoffset, retsize]
    push0											// Stack = [argoffset, argsize, retoffset, retsize]
    selfbalance										// Stack = [contract_value, argoffset, argsize, retoffset, retsize]
    [OWNER]											// Stack = [OWNER, contract_value, argoffset, argsize, retoffset, retsize]
    gas												// Stack = [gas, caller, contract_value, argoffset, argsize, retoffset, retsize]
    call											// Stack = []

	stop

}


#define macro DEPOSIT_WETH() = takes (0) returns (0) {
	// depositWETH7() 0x236b43c4

	push0
    callvalue
    gt

    deposit jumpi

    deposit:
        [WETH_DEPOSIT_SIG]                              // Stack = [WETH_DEPOSIT_SIG, ]
        push0 mstore                                    // Stack = []

        // Set up the CALL parameters
        push0                                           // Stack = [out_size]
        push0                                           // Stack = [out_offset, out_size]
        push0                                       	// Stack = [in_size, out_offset, out_size]
        push0                                           // Stack = [in_offset, in_size, out_offset, out_size]
        callvalue                                       // Stack = [value, in_offset, in_size, out_offset, out_size]
        
        [WETH]                                          // Stack = [WETH, value, in_offset, in_size, out_offset, out_size, calldata, v3_amount_out, v3_amount_in]
        gas
        call

	stop

}


#define macro DEPOSIT_ETH() = takes(0) returns (0) {
	// depositETH206() 0x284cf349
	
	callvalue iszero error jumpi 					// revert if msg.value == 0
	stop
    error:
        push0 push0 revert

}


#define macro ONLY_OWNER() = takes (0) returns (0) {
    
	caller											// [msg.sender]
    [OWNER]											// [OWNER, msg.sender]
    eq												// [OWNER == msg.sender]
    is_owner jumpi									// []
    push0 push0 revert
    is_owner:

}


#define macro CHECK_ORIGIN() = takes (0) returns (0) {

    origin											// [tx.origin]
    [OWNER]											// [OWNER, tx.origin]
    eq												// [OWNER == tx.origin]
    is_origin jumpi									// []
    push0 push0 revert
    is_origin:

}


#define macro CHECK_CALL_STATUS() = takes (0) returns (0) {
    success jumpi									// If the call was successful (status == 1), jump to success
    push0 push0 revert								// If the call failed (status == 0), revert the transaction
    success:
}