// +-------------------------------------------+
// |                Interfaces                 |
// +-------------------------------------------+

// Withdraw WETH withdrawWETH1(uint256)
#define function withdrawWETH1(uint256) nonpayable returns ()

// Withdraw ETH withdrawETH58()
#define function withdrawETH58() nonpayable returns ()

// Deposit WETH depositWETH250()
#define function depositWETH250() payable returns ()

// Deposit ETH depositETH195()
#define function depositETH339() payable returns ()

// Uniswap V3 Swap Callback
#define function uniswapV3SwapCallback(int256,int256,bytes) payable returns ()

// +-------------------------------------------+
// |                Constants                  |
// +-------------------------------------------+

#define constant MAX_SQRT_RATIO = 0xFFFD8963EFD1FC6A506488495D951D5263988D25

#define constant MIN_SQRT_RATIO = 0x1000276A4

#define constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2

#define constant OWNER = // DEPLOYER/OWNER ADDRESS HERE

// +-------------------------------------------+
// |              Function Sigs                |
// +-------------------------------------------+

// transfer(address to, uint value)
#define constant TRANSFER_SIG = 0xa9059cbb00000000000000000000000000000000000000000000000000000000

// transferFrom(address from, address to, uint value)
#define constant TRANSFER_FROM_SIG = 0x23b872dd00000000000000000000000000000000000000000000000000000000

// swap(uint amount0Out, uint amount1Out, address to, bytes data)
#define constant V2_SWAP_SIG = 0x022c0d9f00000000000000000000000000000000000000000000000000000000

// swap(address recipient, bool zeroForOne, int256 amountSpecified, uint160 sqrtPriceLimitX96, bytes data)
#define constant V3_SWAP_SIG = 0x128acb0800000000000000000000000000000000000000000000000000000000

// deposit()
#define constant WETH_DEPOSIT_SIG = 0xd0e30db000000000000000000000000000000000000000000000000000000000

// +-------------------------------------------+
// |    UNISWAP V3 CALLDATA ENCODING FORMAT    |
// +-------------------------------------------+

// *-----------*---------------------------*
// | Bytes     |  Value                    |
// *-----------+---------------------------*
// | 1         |  Pool Types and Out Pos   |
// | 3         |  Amount In                |
// | 3         |  Amount Out               |
// | 20        |  V2 Pool                  |
// | 20        |  V3 Pool                  |
// *-----------*---------------------------*


#define macro CONSTRUCTOR() = takes (0) returns (0) {
 
    push0
    callvalue
    gt

    deposit jumpi

    deposit:
        [WETH_DEPOSIT_SIG]                              // Stack = [WETH_DEPOSIT_SIG, ]
        push0 mstore                                    // Stack = []

        // Set up the CALL parameters
        push0                                           // Stack = [out_size]
        push0                                           // Stack = [out_offset, out_size]
        push0                                       	// Stack = [in_size, out_offset, out_size]
        push0                                           // Stack = [in_offset, in_size, out_offset, out_size]
        callvalue                                       // Stack = [value, in_offset, in_size, out_offset, out_size]
        
        [WETH]                                          // Stack = [WETH, value, in_offset, in_size, out_offset, out_size, calldata, v3_amount_out, v3_amount_in]
        gas
        call

}


#define macro MAIN() = takes (0) returns (0) {
	// evm.codes caller = be862ad9abfe6f22bcb087716c7d89a26051f74c
	// evm.codes address = 9bbfed6889322e016e0a02ee459d306fc19545d8

	calldatasize				// [calldatasize]
	check_caller jumpi			// [check_caller jumpi, calldatasize]

	stop
	stop

	check_caller:
		[OWNER]					// [OWNER, 0x06, calldatasize]
		caller
		eq						// [(msg.sender == OWNER), 0x06, calldatasize]
		v3_swap_jump jumpi		// [v3_swap jumpi, (msg.sender == OWNER), 0x06, calldatasize]

		[OWNER]					// [OWNER, 0x06, calldatasize]
		origin					// [originAddr, OWNER, 0x06, calldatasize]
		eq						// [(originAddr == OWNER), 0x06, calldatasize]
		v3_callback_jump jumpi	// [v3_callback_jump jumpi, (originAddr == OWNER), 0x06, calldatasize]
		
		fallback jump

	v3_swap_jump:
		push0					// [0x00]
		calldataload			// [data[0x00]]			
		push0					// [0x00, data[0x00]]								
		byte					// [byte[0x00]]
		jump					// []  
	
	v3_callback_jump:
		0x84					// [0x84]
		calldataload			// [data[0x00]]			
		push0					// [0x00, data[0x00]]								
		byte					// [byte[0x00]]
		jump					// [] 

	// V2 > V3 00 01 = 
	v2_v3_00_01:
		v2_v3_00_01_jump jump

	// V2 > V3 00 01 callback = 
	v2_v3_00_01_callback:
		v2_v3_00_01_callback_jump jump
	
	// V3 > V2 00 01 = 
	v3_v2_00_01:
		v3_v2_00_01_jump jump

	// V3 > V2 00 01 callback = 
	v3_v2_00_01_callback:
		v3_v2_00_01_callback_jump jump

	// V2 > V3 00 01 = 
	v2_v3_01_00:
		v2_v3_01_00_jump jump

	// V2 > V3 00 01 callback = 
	v2_v3_01_00_callback:
		v2_v3_01_00_callback_jump jump
	
	// V3 > V2 01 00 = 
	v3_v2_01_00:
		v3_v2_01_00_jump jump

	// V3 > V2 01 00 callback = 
	v3_v2_01_00_callback:
		v3_v2_01_00_callback_jump jump

	// 72 : withdrawWETH1
	withdraw_weth: // withdrawWETH1(uint256)
		withdraw_weth_jump jump
	
	// 77 : withdrawETH58
	withdraw_eth: // withdrawETH391()
		withdraw_eth_jump jump
	
	// 7c : depositWETH250
	deposit_weth: // depositWETH114()
		deposit_weth_jump jump
	
	// 81 : depositETH339
	deposit_eth: // depositETH261()
		deposit_eth_jump jump
	
    fallback jump
	
	v2_v3_00_01_jump:
		STORE_V3_SWAP_SIG()
		STORE_CONTRACT()
		STORE_ZERO_FOR_ONE()
		//STORE_AMOUNT_OUT()
		STORE_V2_POOL_1_OUT()
		STORE_MIN_SQRT()
		STORE_OFFSET()
		0x50
		STORE_DATA()
		STORE_LENGTH()
		V3_SWAP()
		stop
	
	v2_v3_00_01_callback_jump:
		CALLBACK_LOAD_DESIRED_AMOUNT_OUT()			// Stack = [amount_out, flag]	
		CALLBACK_SWAP_AMOUNT_1_OUT()				// Stack = [v3_amount_out, desired_amount_out, flag]	
		gt											// Stack  [gte?, v3_amount_out, desired_amount_out, flag]
	
		v2_v3_00_01_callback_continue jumpi
		push0 push0 revert
		v2_v3_00_01_callback_continue:				// Stack = [flag]

			// Set up transferFrom
			CALLBACK_LOAD_DESIRED_AMOUNT_IN()				// Stack = [amount_in, flag]
			CALLBACK_LOAD_V2_POOL()							// Stack = [v2_pool, amount_in, flag]
			address											// Stack = [self, v2_pool, amount_in, flag]

			// Stack needs to be from, to, amount
			TRANSFER_FROM()									// Stack = [flag]

			// Set up V2 Swap
			caller											// Stack = [v3_pool, flag]
			push0											// Stack = [0, v3_pool, flag]
			CALLBACK_SWAP_AMOUNT_0_IN()						// Stack = [amount0Delta (v3_amount_in), 0, v3_pool, flag]
			
			// Stack neeeds to be amount0, amount1, recipient, data
			V2_SWAP()										// Stack = [result, flag]
			stop
	
	v3_v2_00_01_jump:
		STORE_V3_SWAP_SIG()
		STORE_V2_POOL()
		STORE_ONE_FOR_ZERO()
		STORE_AMOUNT_IN()
		STORE_MAX_SQRT()
		STORE_OFFSET()
		0x5a
		STORE_DATA()
		STORE_LENGTH()
		V3_SWAP()
		stop
	
	v3_v2_00_01_callback_jump:
		address										// Stack = [address, flag]
		CALLBACK_LOAD_DESIRED_AMOUNT_OUT()			// Stack = [amount_out, address, flag]
		push0										// Stack = [0, amount_out, address, flag]
		
		// Stack neeeds to be amount0, amount1, recipient, data
		V2_SWAP()									// Stack = [result, 0, amount_out, flag]

		// Set up TransferFrom
		CALLBACK_LOAD_DESIRED_AMOUNT_IN()			// Stack = [amount_in, flag]
		caller										// Stack = [caller, amount_in, flag]
		address										// Stack = [self, caller, amount_in, flag]

		// Stack needs to be from, to, amount
		TRANSFER_FROM()								// Stack = [1, 0, flag, calldata]
		stop
	
	v2_v3_01_00_jump:
		STORE_V3_SWAP_SIG()
		STORE_CONTRACT()
		STORE_ONE_FOR_ZERO()
		//STORE_AMOUNT_OUT()
		STORE_V2_POOL_1_OUT()
		STORE_MAX_SQRT()
		STORE_OFFSET()
		0x64
		STORE_DATA()
		STORE_LENGTH()
		V3_SWAP()
		stop
	
	v2_v3_01_00_callback_jump:
		CALLBACK_LOAD_DESIRED_AMOUNT_OUT()			// Stack = [amount_out, flag]				
		CALLBACK_SWAP_AMOUNT_0_OUT()				// Stack = [v3_amount_out, desired_amount_out, flag]
		gt											// Stack = [gte?, v3_amount_out, desired_amount_out, flag]

		v2_v3_01_00_callback_continue jumpi			
		push0 push0 revert
		v2_v3_01_00_callback_continue:				// Stack = [flag]
			
			// Set up TransferFrom
			CALLBACK_LOAD_DESIRED_AMOUNT_IN()
			CALLBACK_LOAD_V2_POOL()
			address											// Stack = [self, amount_in, flag]

			// Stack needs to be from, to, amount
			TRANSFER_FROM()									// Stack = [flag]

			caller											// Stack = [v3_pool, flag]	
			CALLBACK_SWAP_AMOUNT_1_IN()						// Stack = [amount1Delta (v3_amount_in), v3_pool, flag]
			push0											// Stack = [0, amount1Delta (v3_amount_in), flag]

			// Stack neeeds to be amount0, amount1, recipient, data
			V2_SWAP()									
			stop

	v3_v2_01_00_jump:
		STORE_V3_SWAP_SIG()
		STORE_V2_POOL()
		STORE_ZERO_FOR_ONE()
		STORE_AMOUNT_IN()
		STORE_MIN_SQRT()
		STORE_OFFSET()
		0x6e
		STORE_DATA()
		STORE_LENGTH()
		V3_SWAP()
		stop
	
	v3_v2_01_00_callback_jump:
		address										// Stack = [address, flag]
		push0										// Stack = [0, address, flag]
		CALLBACK_LOAD_DESIRED_AMOUNT_OUT()			// Stack = [amount_out, 0, address, flag]

		// Stack neeeds to be amount0, amount1, recipient, data
		V2_SWAP()									// Stack = [result, flag]

		// Set up TransferFrom
		CALLBACK_LOAD_DESIRED_AMOUNT_IN()			// Stack = [amount_in, flag]
		caller										// Stack = [caller, amount_in, flag]
		address										// Stack = [self, caller, amount_in, flag]

		// Stack needs to be from, to, amount
		TRANSFER_FROM()								// Stack = [1, 0, flag, calldata]
		stop
	
	withdraw_weth_jump:
		WITHDRAW_WETH()
	
	withdraw_eth_jump:
		WITHDRAW_ETH()
	
	deposit_weth_jump:
		DEPOSIT_WETH()
	
	deposit_eth_jump:
		DEPOSIT_ETH()

	fallback:
		push0 push0 revert
	
}

#define macro TRANSFER_FROM() = takes(0) returns (0) {
	
	// 23b872dd
	[TRANSFER_FROM_SIG] 							// Stack = [TRANSFER_FROM_SIG, from_address, to_address, amount_in, flag]
	push0 
	mstore											// Stack = [from_address, to_address, amount_in, flag]
	0x04 
	mstore 											// Stack = [to_address, amount_in, flag]
	0x24 
	mstore 											// Stack = [amount_in, flag]
	0x44 
	mstore 											// Stack = [flag]

	// Set up the CALL parameters
	push0											// Stack = [out_size, flag]
	push0											// Stack = [out_offset, out_size, flag]
	0x64 // 100										// Stack = [in_size, out_offset, out_size, flag]
	push0											// Stack = [in_offset, in_size, out_offset, out_size, flag]
	push0											// Stack = [value, in_offset, in_size, out_offset, out_size, flag]
	[WETH]											// Stack = [WETH, value, in_offset, in_size, out_offset, out_size, flag]

	gas												// Stack = [gas, WETH, value, in_offset, in_size, out_offset, out_size, flag]
	call
	CHECK_CALL_STATUS()

}

#define macro TRANSFER() = takes(0) returns (0) {
	
	// a9059cbb
	[TRANSFER_SIG] 									// Stack = [TRANSFER_FROM_SIG, to_address, amount_in, flag]
	push0 
	mstore											// Stack = [to_address, amount_in, flag]
	0x04 
	mstore 											// Stack = [amount_in, flag]
	0x24 
	mstore 											// Stack = [amount_in, flag]

	// Set up the CALL parameters
	push0											// Stack = [out_size, flag]
	push0											// Stack = [out_offset, out_size, flag]
	0x44 // 100										// Stack = [in_size, out_offset, out_size, flag]
	push0											// Stack = [in_offset, in_size, out_offset, out_size, flag]
	push0											// Stack = [value, in_offset, in_size, out_offset, out_size, flag]
	[WETH]											// Stack = [WETH, value, in_offset, in_size, out_offset, out_size, flag]

	gas												// Stack = [gas, WETH, value, in_offset, in_size, out_offset, out_size, flag]
	call
	CHECK_CALL_STATUS()

}


#define macro V2_SWAP() = takes(0) returns (0) {
	
	// 022c0d9f
	[V2_SWAP_SIG]  									// Stack = [V2_SWAP_SIG, amount0Out, amount1Out, recipient, v2_pool, flag]
	push0
	mstore	// V2_SWAP_SIG							// Stack = [amount0Out, amount1Out, recipient, v2_pool, flag]
	0x04
	mstore	// amount0Out 							// Stack = [amount1Out, recipient, v2_pool, flag]
	0x24
	mstore	// amount1Out							// Stack = [recipient, v2_pool, flag]
	0x44
	mstore	// recipient							// Stack = [v2_pool, flag]
	0x80											// Stack = [80, v2_pool, flag]
	0x64
	mstore	// offset								// Stack = [v2_pool, flag]
	push0											// Stack = [0, v2_pool, flag]
	0x84
	mstore	// data									// Stack = [v2_pool, flag]

	// SET UP CALL PARAMETERS
	push0											// Stack = [out_size, v2_pool, flag]
	push0											// Stack = [out_offset, out_size, v2_pool, flag]
	0xa4 // 164										// Stack = [in_size, out_offset, out_size, v2_pool, flag]
	push0											// Stack = [in_offset, in_size, out_offset, out_size, v2_pool, flag]
	push0											// Stack = [value, in_offset, in_size, out_offset, out_size, v2_pool, flag]
	
	// LOAD V2 ADDRESS
	0x8d											// Stack = [8B, flag]
	calldataload									// Stack = [calldata, flag]
	0x60 											// Stack = [60, calldata, flag]
	shr												// Stack = [v2_pool, flag]
	
	gas 											// Stack = [gas, v2_pool, value, in_offset, in_size, out_offset, out_size, flag]
	call
	CHECK_CALL_STATUS()

}


#define macro V3_SWAP() = takes(0) returns (0) {
	
	// SET UP CALL PARAMETERS
	push0											// Stack = [out_size]
	push0											// Stack = [out_offset, out_size]
	0xe4											// Stack = [in_size, out_offset, out_size]
	push0											// Stack = [in_offset, in_size, out_offset, out_size]
	push0											// Stack = [value, in_offset, in_size, out_offset, out_size]
	
	// LOAD V3 ADDRESS
	0x1d											// Stack = [1d, value, in_offset, in_size, out_offset, out_size]
	calldataload									// Stack = [calldata, in_offset, in_size, out_offset, out_size]
	0x60											// Stack = [60, calldata, in_offset, in_size, out_offset, out_size]
	shr												// Stack = [v3_pool, in_offset, in_size, out_offset, out_size]

	// SEND CALL AND STOP
	gas 											// Stack = [gas, v3_pool, value, in_offset, in_size, out_offset, out_size]
	call
	CHECK_CALL_STATUS()
}


#define macro STORE_V3_SWAP_SIG() = takes (0) returns (0) {
	[V3_SWAP_SIG]									// Stack = [V3_SWAP_SIG]
	push0 											// Stack = [0, V3_SWAP_SIG]
	mstore											// Stack = []
}


#define macro STORE_CONTRACT() = takes(0) returns (0) {
	address											// Stack = [address(this)]
	0x04 											// Stack = [4, address(this)]
	mstore					 						// Stack = []
}


#define macro STORE_V2_POOL() = takes(0) returns (0) {
	0x09											// Stack = [7]
	calldataload									// Stack = [calldata]
	0x60 											// Stack = [60, calldata]
	shr												// Stack = [v2_pool]
	0x04 											// Stack = [4, v2_pool]
	mstore					 						// Stack = []
}

// V2 OUT > V3 IN FOR V2 > V3 SWAPS
#define macro STORE_V2_POOL_1_OUT() = takes(0) returns (0) {
	0x31											// Stack = [1d (49)]
	calldataload									// Stack = [calldata]
	0x90											// Stack = [90 > 144 (18 bytes), calldata]
	shr												// Stack = [v2_pool_1_out]
	0x44 											// Stack = [44, v2_pool_1_out]
	mstore					 						// Stack = []
}


#define macro STORE_ZERO_FOR_ONE() = takes(0) returns (0) {
	0x01											// Stack = [1]
	0x24											// Stack = [24, 1]
	mstore 											// Stack = []
}


#define macro STORE_ONE_FOR_ZERO() = takes(0) returns (0) {
	push0											// Stack = [1]
	0x24											// Stack = [24, 1]
	mstore 											// Stack = []
}


#define macro STORE_AMOUNT_IN() = takes(0) returns (0) {
	0x01											// Stack = [1]
	calldataload									// Stack = [calldata]
	0xe0											// Stack = [0xe0, calldata]
	shr												// Stack = [calldata >> 184 (28)]
	0x28											// Stack = [28, calldata >> 40 (5)]
	shl												// Stack = [amount_out]
	0x44											// Stack = [44, amount_out]
	mstore											// Stack = []
}


#define macro STORE_AMOUNT_OUT() = takes(0) returns (0) {
	0x05											// Stack = [4]
	calldataload									// Stack = [calldata]
	0xe0											// Stack = [0xe0, calldata]
	shr												// Stack = [calldata >> 184 (28)]
	0x28											// Stack = [28, calldata >> 184 (23)]
	shl												// Stack = [amount_out]
	push0											// Stack = [0, amount_out]
	sub												// Stack = [amount_out_negative]
	0x44											// Stack = [44, amount_out_negative]
	mstore											// Stack = []
}


#define macro STORE_MIN_SQRT() = takes(0) returns (0) {
	[MIN_SQRT_RATIO]								// Stack = [MIN_SQRT_RATIO]
	0x64											// Stack = [64, MIN_SQRT_RATIO]
	mstore											// Stack = []
}


#define macro STORE_MAX_SQRT() = takes(0) returns (0) {
	[MAX_SQRT_RATIO]								// Stack = [MAX_SQRT_RATIO]
	0x64											// Stack = [64, MAX_SQRT_RATIO]
	mstore											// Stack = []
}


#define macro STORE_OFFSET() = takes(0) returns(0) {
	0xa0											// Stack = [a0]
	0x84											// Stack = [84, a0] 
	mstore											// Stack = []
}


#define macro STORE_LENGTH() = takes(0) returns(0) {
	0x1d											// Stack = [1b]
	0xa4											// Stack = [a4, 20]
	mstore											// Stack = []
}


#define macro STORE_DATA() = takes(1) returns(0) {
	0x01											// Stack = [01, input]
	calldataload									// Stack = [calldata, input]
	0x20											// Stack = [24 (3), calldata, input]
	shr												// Stack = [calldata, input]
	0x18											// Stack = [24 (3), calldata, input]
	shl												// Stack = [calldata, input]
	0xc4											// Stack = [c4, calldata, input]
	mstore 											// Stack = [input]
	0xa5											// Stack = [a5, input]
	mstore											// Stack = []
}


#define macro CALLBACK_LOAD_DESIRED_AMOUNT_IN() = takes(0) returns(0) {
	0x85											// Stack = [85, flag]
	calldataload									// Stack = [calldata, flag]
	0xe0 
	shr												// Stack = [amount_in, flag]
	0x28 
	shl												// Stack = [amount_in, flag]
}


#define macro CALLBACK_LOAD_DESIRED_AMOUNT_OUT() = takes(0) returns(0) {
	0x89											// Stack = [8, flag]
	calldataload									// Stack = [calldata, flag]
	0xe0 											// Stack = [c8, calldata, flag]
	shr												// Stack = [calldata >> 200, flag]
	0x28 											// Stack = [28, amount_out_3bytes, flag]
	shl												// Stack = [amount_out, flag]
}


#define macro CALLBACK_LOAD_V2_POOL() = takes(0) returns (0) {
	0x8d											// Stack = [8B, amount_in, flag]
	calldataload									// Stack = [calldata, amount_in, flag]
	0x60 											// Stack = [60, calldata, amount_in, flag]
	shr												// Stack = [v2_pool, amount_in, flag]
}


#define macro CALLBACK_SWAP_AMOUNT_0_IN() = takes(0) returns (0) {
	0x04
	calldataload								// Stack = [amount1Delta (v3_amount_in), amount_out, flag]
}


#define macro CALLBACK_SWAP_AMOUNT_1_IN() = takes(0) returns (0) {
	0x24
	calldataload								// Stack = [amount1Delta (v3_amount_in), amount_out, flag]
}


#define macro CALLBACK_SWAP_AMOUNT_0_OUT() = takes(0) returns (0) {
	0x04 										// Stack = [24, amount_out, flag]	
	calldataload								// Stack = [amount0Delta (v3_amount_out), amount_out, flag]
	not											// Stack = [amount0Delta (v3_amount_out), amount_out, flag]
	0x02										// Stack = [2, amount0Delta (v3_amount_out), amount_out, flag]
	add											// Stack = [amount0Delta (v3_amount_out), amount_out, flag]
}


#define macro CALLBACK_SWAP_AMOUNT_1_OUT() = takes(0) returns (0) {
	0x24 										// Stack = [24, amount_out, flag]	
	calldataload								// Stack = [amount0Delta (v3_amount_out), amount_out, flag]
	not											// Stack = [amount0Delta (v3_amount_out), amount_out, flag]
	0x02										// Stack = [2, amount0Delta (v3_amount_out), amount_out, flag]
	add											// Stack = [amount0Delta (v3_amount_out), amount_out, flag]
}


#define macro WITHDRAW_WETH() = takes(0) returns (0) {
	// withdrawWETH52() 0x1983e529
	
	0x04
	calldataload
	address

    [TRANSFER_FROM_SIG] push0 mstore				// store 0xa9059cbb as mem(0x00)
	0x04 mstore
    [OWNER] 0x24 mstore								// store OWNER at mem(0x04)
    0x44 mstore										// store amountOut at mem(0x24)

    // make transfer call
    push0											// Stack = [retsize]
    push0											// Stack = [retoffset, retsize]
    0x64  // 68 (4 + 32 + 32 + 32)						// Stack = [argsize, retoffset, retsize]
    push0											// Stack = [argoffset, argsize, retoffset, retsize]
    push0											// Stack = [value, argoffset, argsize, retoffset, retsize]
    [WETH]											// Stack = [weth_addr, value, argoffset, argsize, retoffset, retsize]
    gas												// Stack = [gas, weth_addr, value, argoffset, argsize, retoffset, retsize]
    call

	stop

}


#define macro WITHDRAW_ETH() = takes(0) returns (0) {
	// withdrawETH292() 0x1e07a35f

	push0											// Stack = [retsize]
    push0											// Stack = [retoffset, retsize]
    push0											// Stack = [argsize, retoffset, retsize]
    push0											// Stack = [argoffset, argsize, retoffset, retsize]
    selfbalance										// Stack = [contract_value, argoffset, argsize, retoffset, retsize]
    [OWNER]											// Stack = [OWNER, contract_value, argoffset, argsize, retoffset, retsize]
    gas												// Stack = [gas, caller, contract_value, argoffset, argsize, retoffset, retsize]
    call											// Stack = []

	stop

}


#define macro DEPOSIT_WETH() = takes (0) returns (0) {
	// depositWETH7() 0x236b43c4

	push0
    callvalue
    gt

    deposit jumpi

    deposit:
        [WETH_DEPOSIT_SIG]                              // Stack = [WETH_DEPOSIT_SIG, ]
        push0 mstore                                    // Stack = []

        // Set up the CALL parameters
        push0                                           // Stack = [out_size]
        push0                                           // Stack = [out_offset, out_size]
        push0                                       	// Stack = [in_size, out_offset, out_size]
        push0                                           // Stack = [in_offset, in_size, out_offset, out_size]
        callvalue                                       // Stack = [value, in_offset, in_size, out_offset, out_size]
        
        [WETH]                                          // Stack = [WETH, value, in_offset, in_size, out_offset, out_size, calldata, v3_amount_out, v3_amount_in]
        gas
        call

	stop

}


#define macro DEPOSIT_ETH() = takes(0) returns (0) {
	// depositETH206() 0x284cf349
	
	callvalue iszero error jumpi 					// revert if msg.value == 0
	stop
    error:
        push0 push0 revert

}


#define macro CHECK_CALL_STATUS() = takes (0) returns (0) {
    success jumpi									// If the call was successful (status == 1), jump to success
    push0 push0 revert								// If the call failed (status == 0), revert the transaction
    success:
}